/*
 * Gradle build script for CSIRO CASDA Data Access web application (casda_data_access).
 * 
 * Built for Gradle v2.6
 *
 * Primary tasks are:
 *  clean - Remove the contents of the build folder ready for a full rebuild.
 *  build - Compiles the code, builds the war, and runs the tests (this is the most commonly used command)
 *  eclipse - Usually after cleanEclipse - rebuild the eclipse (or STS) classpath and so on.
 */
buildscript {
    repositories { 
        mavenCentral()
    }
    dependencies {
        classpath("org.hidetake:gradle-ssh-plugin:0.3.10")
    }
}

task wrapper(type: Wrapper) { gradleVersion = '2.6' }
    
apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'
apply plugin: 'maven-publish'
apply plugin: 'ssh'
    
group = 'au.csiro'

project.ext.baseName = 'casda_data_access'
project.description = 'CSIRO CASDA Project - CASDA Data Access'
        
ext {
	majorVersion = 1
	minorVersion = 8
    springBootVer = '1.3.6.RELEASE'
    springSecurityVer = '3.2.7.RELEASE'
    tomcatVer = '8.0.14'
}
        
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal() // Required when we use locally-built versions of CSIRO projects
    mavenCentral()
    ivy {
        url 'https://github.com/csiro-rds/casda_vo_tools/raw/master/'
        layout ('pattern') {
            artifact 'external-libs/[artifact]-[revision](-[classifier])(.[ext])'
        }
    }
    ivy {
        url 'https://github.com/csiro-rds/casda_deposit_manager/raw/master/'
        layout ('pattern') {
            artifact 'lib/[artifact]-[revision](-[classifier])(.[ext])'
        }
    }
    maven { url "http://www.hibernatespatial.org/repository" }
    maven { url "http://repo.boundlessgeo.com/main" }
    jcenter()
}

configurations { 
    providedRuntime 
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    all*.exclude group: "xerces", module: "xercesImpl"
    all*.exclude group: "org.hamcrest", module: "hamcrest-library"
    all*.exclude group: "org.hamcrest", module: "hamcrest-core"
}

eclipse.classpath.downloadJavadoc = true // defaults to 'false'

dependencies {
    compile("au.csiro:casda_commons:1.0.261")
    compile ("au.csiro:job_manager:1.1.24")

    compile 'org.apache.logging.log4j:log4j-web:2.1'
    compile("org.springframework.boot:spring-boot-starter-integration:${springBootVer}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVer}") 
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVer}") 
    {
        exclude group: "org.apache.tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    compile("org.springframework.boot:spring-boot-starter-ws:${springBootVer}") 
    { 
        // exclude the tomcat libraries so they are not included in the war file
        exclude group:"org.springframework.boot", module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVer}")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${springBootVer}")
    {
    	exclude group: "org.apache.tomcat.embed"
    }
    
    // reinstate for tomcat 8 if you can exclude the tomcat libs from
    providedRuntime("org.apache.tomcat:tomcat-jdbc:${tomcatVer}")

    compile("org.springframework.boot:spring-boot-starter-log4j2:${springBootVer}")

    compile("org.springframework.security:spring-security-taglibs:${springSecurityVer}")
    
    compile("au.csiro.spring-notification:spring-notification:1.0.8")
    
    compile("org.postgresql:postgresql:9.3-1103-jdbc41")
    
    // for spatial tools such as JTS for postgis dialect
    compile("org.hibernate:hibernate-spatial:4.3") 
    {
        //use newer version of postgres driver
        exclude(module: 'postgresql')
    }

    compile("fr.unistra.saada:uws:4")
    
    compile("org.apache.httpcomponents:httpclient:4.5")
    
    // Swagger UI for showing interactive API docs
    compile("com.mangofactory:swagger-springmvc:1.0.2")
    compile "org.ajar:swagger-spring-mvc-ui:0.4"
    compile("com.google.guava:guava:18.0") 

	//jstl for jsp rendering
    compile("jstl:jstl:1.2")
    
    compile("javax.servlet:javax.servlet-api:3.1.0")
    
    compile group: 'javax.el', name: 'javax.el-api', version: '2.2.5'
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.20'
    
    compile("org.apache.commons:commons-lang3:3.4")
	compile("org.apache.commons:commons-collections4:4.0")
	compile("org.springframework:spring-context-support:4.0.6.RELEASE")
    
    // String-templating library
    compile("org.antlr:stringtemplate:4.0.2")
    // for using joda's date time with hibernate
    compile("org.jadira.usertype:usertype.core:4.0.0.GA")
    
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVer}")
    testCompile("com.h2database:h2:1.4.188")
    // H2 extension for geometry
    testCompile("org.opengeo:geodb:0.8")
        
    testCompile("junit:junit:4.12")
    testCompile("org.hamcrest:java-hamcrest:2.0.0.0")
    testCompile("org.hamcrest:hamcrest-junit:2.0.0.0")
    testCompile('org.mockito:mockito-core:1.10.19')
	testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.6'
	testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.6'
	testCompile("org.subethamail:subethasmtp:3.1.7")
    
    // For testing JSON Path expressions
    testCompile("com.jayway.jsonpath:json-path:2.2.0")
    
    testCompile 'xmlunit:xmlunit:1.6'
    
}

apply from: 'gradle/versioning.gradle'

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

war {
    duplicatesStrategy = "EXCLUDE"
    baseName = 'casda_data_access'
}
war.dependsOn makeVersionProps

//=====================================================================================================================
//
// Include other build files
//
//=====================================================================================================================

// Produces pmd, findbugs and checkstyle reports.
apply from: 'gradle/report.gradle'

// Produces jacoco code coverage report.
apply from: 'gradle/coverage-report.gradle'

// We conditionally apply the publish script so that we don't need the properties for all builds.
if (gradle.startParameter.taskNames.any{it =~ /publish/}) {
    apply from: 'gradle/publish.gradle'
}

// We conditionally apply the deploy script so that we don't need the properties for all builds.
if (gradle.startParameter.taskNames.contains('deployToServer')) {
    apply from: 'gradle/deploy.gradle'
}

// The status task hits the CASDA Rules service's health check and throws an exception if its not healthy
if (gradle.startParameter.taskNames.contains('status')) {
    apply from: 'gradle/status.gradle'
}

if (!project.hasProperty('targetEnv') && gradle.startParameter.taskNames.any{it =~ /[lL]ocal/ }) { // Only called locally
    apply from: 'gradle/local.tomcat.gradle'
}

processResources {
    from("src/main/resources") {
        include "application.properties"
        expand(project.properties) 
    }
}

//=====================================================================================================================
//
// Eclipse Configuration
//
//=====================================================================================================================

eclipse {
    project { natures 'org.springsource.ide.eclipse.gradle.core.nature' }
}
